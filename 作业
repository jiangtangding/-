#include<stdlib.h>
#include<stdio.h>
#include<iostream>
#include<cmath>
#include <string>
using namespace std;
char* creat()//顺序存储二叉树
{
	static char arr[50];
	int n = 1;
	arr[0] = '#';
	while (cin >> arr[n])
	{
		n++;
		if (cin.get() == '\n')
			break;
	}
	return arr;
}
int fun1(char* r, char x)//查找输入节点在数组中的位置下标
{
	int n;
	int t;
	n = strlen(r);
	for (t = 1; t < n; t++)
	{
		if (x == r[t])
		{
			return t;
			break;
		}
	}
	if (t == n)
		return 0;
}
int fun2(int p, int q)//查找两个节点最近公共祖先节点的位置下标
{
	while (1)
	{
		if (p > q)
		{
			p = p / 2;
		}
		if (q > p)
		{
			q = q / 2;
		}
		if (p == q)
		{
			return q;
			break;
		}
	}
}
void print1(char* r, char p, char q)//结果输出
{
	if (r[fun2(fun1(r, p), fun1(r, q))] == '#')
		cout << "输入信息有误,请重新输入"<<endl;
	else
		cout << "所以" << p << "与" << q << "最近公共祖先是" << r[fun2(fun1(r, p), fun1(r, q))] << endl;
}
void print2(char* r,char p,char q)//结果与过程图形输出
{
	int d = 0;
	int i, j, c;
	int n = strlen(r);
	int k = (int)log2((double)n - 1) + 1;
	char a[7][128];
	memset(a, '-', sizeof(a));
	for (i = 1; i <= k; i++)//二维数组赋值
	{
		c = 1;
		while (c <= (int)pow(2, (double)i - 1))
		{
			d++;
			a[i][(int)(pow(2, (double)k - (double)i) + ((double)c - 1) * pow(2, (double)k - (double)i + 1))] = r[d];
			c++;
		}
	}
	cout << "二叉树的完整树形如下" << endl;
	for (i = 1; i <= k; i++)//整棵树输出
	{
		for (j = 1; j < (int)pow(2, (double)k); j++)
		{
			if (a[i][j] == '#')
			{
				a[i][j] = '-';
			}
			cout << a[i][j];
		}
		cout << endl;
	}
	cout << endl;
	int l = fun1(r, p);
	int m = fun1(r, q);
	cout << "图形显示过程如下"<<endl;
	while (1)//过程输出
	{
		for (i = 1; i <= k; i++)
		{
			for (j = 1; j < (int)pow(2, (double)k); j++)
			{
				if (a[i][j] != r[l] && a[i][j] != r[m])
				{
					a[i][j] = '-';
				}
				cout << a[i][j];
			}
			cout << endl;
		}
		cout << endl;
		if (l > m)
		{
			l = l / 2;
		}
		else if(l<m)
		{
			m = m / 2;
		}
		else if (l == m)
		{
			break;
		}
		memset(a, '-', sizeof(a));
		d = 0;
		for (i = 1; i <= k; i++)
		{
			c = 1;
			while (c <= (int)pow(2, (double)i - 1))
			{
				d++;
				a[i][(int)(pow(2, (double)k - (double)i) + ((double)c - 1) * pow(2, (double)k - (double)i + 1))] = r[d];
				c++;
			}
		}
	}
}
int main()
{
	int t;
	while (1) 
	{
		char* r;
		cout << "顺序输入二叉树'#'表示空：" << endl;
		r = creat();
		char p;
		cout << "输入p(p应为二叉树中结点)：" << endl;
		cin >> p;
		char q;
		cout << "输入q(q应为二叉树中结点)：" << endl;
		cin >> q;
		print2(r, p, q);
		print1(r, p, q);
		cout << endl;
		cout << "重新输入按'1'，结束输入按'0'"<<endl;
		cin >> t;
		if (t == 1)
		{
			continue;
		}
		if (t == 0)
		{
			break;
		}
	}
	system("pause");
	return 0;
}
